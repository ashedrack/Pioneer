name: Deploy to AWS

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: pioneer
  ECS_SERVICE: pioneer-service
  ECS_CLUSTER: pioneer-cluster
  CONTAINER_NAME: pioneer-app
  ECS_TASK_DEFINITION: pioneer-task
  CONTAINER_PORT: 8000

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::179079437960:role/github-actions-role-v2
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Post-deployment verification
        id: verify
        run: |
          echo "Verifying deployment..."
          DEPLOYMENT_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[0].rolloutState' \
            --output text)
          echo "Deployment status: $DEPLOYMENT_STATUS"
          if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Deployment Status
        if: always()
        run: |
          if [[ "${{ steps.verify.outputs.status }}" == "success" ]]; then
            echo " Deployment completed successfully!"
          else
            echo " Deployment failed!"
            exit 1
          fi
