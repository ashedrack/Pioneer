name: Deploy to AWS
on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: pioneer
  ECS_SERVICE: pioneer-service
  ECS_CLUSTER: pioneer-cluster
  CONTAINER_NAME: pioneer-app
  ECS_TASK_DEFINITION: pioneer-task
  CONTAINER_PORT: 8000

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::179079437960:role/github-actions-role-v2
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max


      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GithubActionsSession

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Download and clean task definition
        run: |
          # Download the task definition
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition' > task-definition-full.json

          # Extract and clean the container definitions
          jq '{
            family: .family,
            networkMode: .networkMode,
            containerDefinitions: [.containerDefinitions[] | del(.enableFaultInjection)],
            executionRoleArn: .executionRoleArn,
            taskRoleArn: .taskRoleArn,
            cpu: .cpu,
            memory: .memory,
            requiresCompatibilities: ["FARGATE"]
          }' task-definition-full.json > task-definition.json

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Debug ECS Service
        run: |
          echo "Getting detailed service information..."
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --output json | jq '.'

      - name: Post-deployment verification
        id: verify
        run: |
          echo "Verifying deployment..."
          MAX_ATTEMPTS=10
          WAIT_SECONDS=30
          attempt=1
          
          while [ $attempt -le $MAX_ATTEMPTS ]; do
            echo "Attempt $attempt of $MAX_ATTEMPTS"
            
            # Get service details with proper query for PRIMARY deployment
            SERVICE_JSON=$(aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }})
            
            # Get deployment status from PRIMARY deployment
            DEPLOYMENT_STATUS=$(echo $SERVICE_JSON | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .rolloutState')
            RUNNING_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].runningCount')
            DESIRED_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].desiredCount')
            PENDING_COUNT=$(echo $SERVICE_JSON | jq -r '.services[0].pendingCount')
            
            echo "Deployment status: $DEPLOYMENT_STATUS"
            echo "Running tasks: $RUNNING_COUNT/$DESIRED_COUNT (Pending: $PENDING_COUNT)"
            
            # Check deployment events for any recent errors
            echo "Recent events:"
            echo $SERVICE_JSON | jq -r '.services[0].events[:3] | .[] | .message'
            
            if [ "$DEPLOYMENT_STATUS" = "COMPLETED" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$PENDING_COUNT" -eq 0 ]; then
              echo " Deployment successful!"
              echo "status=success" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ "$DEPLOYMENT_STATUS" = "FAILED" ]; then
              echo " Deployment failed!"
              # Get failure reason from PRIMARY deployment
              FAILURE_REASON=$(echo $SERVICE_JSON | jq -r '.services[0].deployments[] | select(.status=="PRIMARY") | .rolloutStateReason')
              echo "Failure reason: $FAILURE_REASON"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "Waiting $WAIT_SECONDS seconds before next check..."
            sleep $WAIT_SECONDS
            attempt=$((attempt + 1))
          done
          
          echo " Deployment verification timed out after $((MAX_ATTEMPTS * WAIT_SECONDS)) seconds"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

      - name: Deployment Status
        if: always()
        run: |
          if [[ "${{ steps.verify.outputs.status }}" == "success" ]]; then
            echo " Deployment completed successfully!"
          else
            echo " Deployment failed!"
            exit 1
          fi
