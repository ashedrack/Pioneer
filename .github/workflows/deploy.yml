name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
      - main
  pull_request:
    branches:
      - staging
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-1

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  validate:
    name: Validation and Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort bandit safety


      - name: Run tests with coverage
        run: |
          pytest --cov=./ --cov-report=xml --junitxml=test-results.xml tests/

      - name: Report formatting status
        if: ${{ always() }}
        run: |
          if [ ${{ steps.format-check.outcome }} == 'failure' ]; then
            echo "::warning::Code formatting issues found. Please run 'black .' and 'isort .' locally."
          fi

      - name: Run security scan
        id: security-scan
        continue-on-error: true
        run: |
          # Install security tools
          pip install --upgrade bandit safety
          
          echo "Running Bandit security scan..."
          # Run Bandit with verbose output for debugging
          bandit -v -c .bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with issues"
          bandit -v -c .bandit -r . -f html -o bandit-report.html || echo "Bandit HTML report generation completed"
          
          echo "Running Safety vulnerability scan..."
          # Run Safety scan with better error handling
          safety scan \
            --output json \
            --full-report \
            --json-output-file safety-report.json \
            requirements.txt || echo "Safety scan completed with issues"
          
          # Create empty report files if they don't exist
          touch bandit-report.json bandit-report.html safety-report.json

      - name: Ensure artifact files exist
        run: |

          touch test-results.xml coverage.xml
          echo "Analyzing security scan results..."
          
          # Initialize status variables
          HIGH_SEVERITY=0
          CRITICAL_SEVERITY=0
          
          # Check if reports exist and are valid JSON
          echo "Validating Bandit report..."
          if [ -f bandit-report.json ] && jq empty bandit-report.json 2>/dev/null; then
            echo "Processing Bandit results..."
            HIGH_COUNT=$(jq '.metrics.high // 0' bandit-report.json)
            if [ "$HIGH_COUNT" -gt "0" ]; then
              echo "::warning::Found $HIGH_COUNT high severity issues in Bandit scan"
              HIGH_SEVERITY=1
              # List high severity issues
              jq -r '.results[] | select(.issue_severity=="HIGH") | "- [\(.issue_text)](\(.filename):\(.line_number))"' bandit-report.json || echo "No detailed results available"
            fi
          else
            echo "::warning::Bandit report not found or invalid JSON format"
          fi
          
          echo "Validating Safety report..."
          if [ -f safety-report.json ] && jq empty safety-report.json 2>/dev/null; then
            echo "Processing Safety results..."
            if jq -e '.[] | select(.severity=="critical")' safety-report.json > /dev/null; then
              echo "::warning::Found critical vulnerabilities in dependencies"
              CRITICAL_SEVERITY=1
              # List critical vulnerabilities
              jq -r '.[] | select(.severity=="critical") | "- \(.package_name) \(.installed_version): \(.vulnerability_id)"' safety-report.json || echo "No detailed results available"
            fi
          else
            echo "::warning::Safety report not found or invalid JSON format"
          fi
          
          # Set final status
          if [ $HIGH_SEVERITY -eq 1 ] || [ $CRITICAL_SEVERITY -eq 1 ]; then
            echo "::error::Security scan found critical issues. Please review the security reports."
            exit 1
          else
            echo "No critical security issues found."
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

      - name: Run code formatting checks
        run: |
          black --check .
          isort --check-only .

      - name: Run static analysis
        run: |
          flake8 .

      - name: Run security scans
      - name: Run tests with coverage
        run: |
          bandit -r .
          safety check -r requirements.txt

  build:
    name: Build Docker Image
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        id: deploy
        run: |
          aws ecs update-service --cluster staging-cluster --service pioneer-service --force-new-deployment

      - name: Verify Deployment
        run: |
          aws ecs wait services-stable \
            --cluster staging-cluster \
            --services pioneer-service

      - name: Health Check
        run: |
          sleep 30
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://staging.pioneer.cloudpioneer.com/health)
            if [ "$response" -eq 200 ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i: Health check failed with status $response"
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

      - name: Run Smoke Tests
        run: |
          echo "Running smoke tests..."
          pytest tests/smoke/ -v || echo "Smoke tests failed"

      - name: Monitor Deployment
        run: |
          aws cloudwatch get-metric-statistics \
            --namespace AWS/ECS \
            --metric-name CPUUtilization \
            --dimensions Name=ClusterName,Value=staging-cluster Name=ServiceName,Value=pioneer-service \
            --start-time $(date -u -d '5 minutes ago' +"%Y-%m-%dT%H:%M:00Z") \
            --end-time $(date -u +"%Y-%m-%dT%H:%M:00Z") \
            --period 300 \
            --statistics Average

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          aws ecs update-service \
            --cluster staging-cluster \
            --service pioneer-service \
            --force-new-deployment \
            --task-definition $(aws ecs describe-services \
              --cluster staging-cluster \
              --services pioneer-service \
              --query 'services[0].taskDefinition' \
              --output text)
